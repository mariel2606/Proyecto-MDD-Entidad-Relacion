//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;

[module: global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Scope = "type", Target = "UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.JMGPVRCMAMBModeladoYLenguajeGraficoDiagram")]

namespace UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico
{
	/// <summary>
	/// DomainClass JMGPVRCMAMBModeladoYLenguajeGraficoDiagram
	/// Description for
	/// UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.JMGPVRCMAMBModeladoYLenguajeGraficoDiagram
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.JMGPVRCMAMBModeladoYLenguajeGraficoDiagram.DisplayName", typeof(global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.JMGPVRCMAMBModeladoYLenguajeGraficoDomainModel), "UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.JMGPVRCMAMBModeladoYLenguajeGraficoDiagram.Description", typeof(global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.JMGPVRCMAMBModeladoYLenguajeGraficoDomainModel), "UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.JMGPVRCMAMBModeladoYLenguajeGraficoDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d9194bba-0d77-4ed5-b824-f6d04ba520b7")]
	public partial class JMGPVRCMAMBModeladoYLenguajeGraficoDiagram : DslDiagrams::Diagram
	{
		#region Diagram boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		#endregion
		#region Toolbox filters
		private static global::System.ComponentModel.ToolboxItemFilterAttribute[] toolboxFilters = new global::System.ComponentModel.ToolboxItemFilterAttribute[] {
					new global::System.ComponentModel.ToolboxItemFilterAttribute(global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.JMGPVRCMAMBModeladoYLenguajeGraficoToolboxHelperBase.ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require) };
		
		/// <summary>
		/// Toolbox item filter attributes for this diagram.
		/// </summary>
		public override global::System.Collections.ICollection TargetToolboxItemFilterAttributes
		{
			get
			{
				return toolboxFilters;
			}
		}
		#endregion
		#region Diagram styles
		/// <summary>
		/// Initializes style set resources for this shape type
		/// </summary>
		/// <param name="classStyleSet">The style set for this shape class</param>
		protected override void InitializeResources(DslDiagrams::StyleSet classStyleSet)
		{
			base.InitializeResources(classStyleSet);
			
			// Fill brush settings for this shape.
			DslDiagrams::BrushSettings backgroundBrush = new DslDiagrams::BrushSettings();
			backgroundBrush.Color = global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.Lavender);
			classStyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.DiagramBackground, backgroundBrush);
		
			// Text brush settings for this shape.
			DslDiagrams::BrushSettings textBrush = new DslDiagrams::BrushSettings();
			textBrush.Color = global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.DarkOrange);
			classStyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.DiagramText, textBrush);
		
		}
		#endregion
		#region Auto-placement
		/// <summary>
		/// Indicate that child shapes should added through view fixup should be placed automatically.
		/// </summary>
		public override bool ShouldAutoPlaceChildShapes
		{
			get
			{
				return true;
			}
		}
		#endregion
		#region Shape mapping
		/// <summary>
		/// Called during view fixup to ask the parent whether a shape should be created for the given child element.
		/// </summary>
		/// <remarks>
		/// Always return true, since we assume there is only one diagram per model file for DSL scenarios.
		/// </remarks>
		protected override bool ShouldAddShapeForElement(DslModeling::ModelElement element)
		{
			return true;
		}
		
		/// <summary>
		/// Called during view fixup to configure the given child element, after it has been created.
		/// </summary>
		/// <remarks>
		/// Custom code for choosing the shapes attached to either end of a connector is called from here.
		/// </remarks>
		protected override void OnChildConfiguring(DslDiagrams::ShapeElement child, bool createdDuringViewFixup)
		{
			DslDiagrams::NodeShape sourceShape;
			DslDiagrams::NodeShape targetShape;
			DslDiagrams::BinaryLinkShape connector = child as DslDiagrams::BinaryLinkShape;
			if(connector == null)
			{
				base.OnChildConfiguring(child, createdDuringViewFixup);
				return;
			}
			this.GetSourceAndTargetForConnector(connector, out sourceShape, out targetShape);
			
			global::System.Diagnostics.Debug.Assert(sourceShape != null && targetShape != null, "Unable to find source and target shapes for connector.");
			connector.Connect(sourceShape, targetShape);
		}
		
		/// <summary>
		/// helper method to find the shapes for either end of a connector, including calling the user's custom code
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		internal void GetSourceAndTargetForConnector(DslDiagrams::BinaryLinkShape connector, out DslDiagrams::NodeShape sourceShape, out DslDiagrams::NodeShape targetShape)
		{
			sourceShape = null;
			targetShape = null;
			
			if (sourceShape == null || targetShape == null)
			{
				DslDiagrams::NodeShape[] endShapes = GetEndShapesForConnector(connector);
				if(sourceShape == null)
				{
					sourceShape = endShapes[0];
				}
				if(targetShape == null)
				{
					targetShape = endShapes[1];
				}
			}
		}
		
		/// <summary>
		/// Helper method to find shapes for either end of a connector by looking for shapes associated with either end of the relationship mapped to the connector.
		/// </summary>
		private DslDiagrams::NodeShape[] GetEndShapesForConnector(DslDiagrams::BinaryLinkShape connector)
		{
			DslModeling::ElementLink link = connector.ModelElement as DslModeling::ElementLink;
			DslDiagrams::NodeShape sourceShape = null, targetShape = null;
			if (link != null)
			{
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslModeling::ModelElement> linkedElements = link.LinkedElements;
				if (linkedElements.Count == 2)
				{
					DslDiagrams::Diagram currentDiagram = this.Diagram;
					DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[0]);
					foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
					{
						DslDiagrams::NodeShape shape = presentationElement as DslDiagrams::NodeShape;
						if (shape != null && shape.Diagram == currentDiagram)
						{
							sourceShape = shape;
							break;
						}
					}
					
					presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[1]);
					foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
					{
						DslDiagrams::NodeShape shape = presentationElement as DslDiagrams::NodeShape;
						if (shape != null && shape.Diagram == currentDiagram)
						{
							targetShape = shape;
							break;
						}
					}
		
				}
			}
			
			return new DslDiagrams::NodeShape[] { sourceShape, targetShape };
		}
		
		/// <summary>
		/// Creates a new shape for the given model element as part of view fixup
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily", Justification = "Generated code.")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
		protected override DslDiagrams::ShapeElement CreateChildShape(DslModeling::ModelElement element)
		{
			if(element is global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.Entidad)
			{
				global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.MetaforaEntidad newShape = new global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.MetaforaEntidad(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.Relacion)
			{
				global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.MetaforaRelacion newShape = new global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.MetaforaRelacion(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.AtributoSimple)
			{
				global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.MetaforaAtributo newShape = new global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.MetaforaAtributo(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.AtributoCP)
			{
				global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.MetaforaAtributoClave newShape = new global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.MetaforaAtributoClave(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.EGPortalWeb)
			{
				global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.MetaforaEGPortal newShape = new global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.MetaforaEGPortal(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.EGPaginaWeb)
			{
				global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.MetaforaEGPagnaWeb newShape = new global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.MetaforaEGPagnaWeb(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.EGCampoFormulario)
			{
				global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.MetaforaEGCampoFormulario newShape = new global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.MetaforaEGCampoFormulario(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.RelacionReferencesRelacionNEntidad)
			{
				global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.MetaforaRNE newShape = new global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.MetaforaRNE(this.Partition);
				return newShape;
			}
			if(element is global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.ObjetoReferencesObjetoAtributoSimple)
			{
				global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.MetaforaConexion newShape = new global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.MetaforaConexion(this.Partition);
				return newShape;
			}
			if(element is global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.EntidadReferencesEntidadCP)
			{
				global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.MetaforaConexionCP newShape = new global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.MetaforaConexionCP(this.Partition);
				return newShape;
			}
			if(element is global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.EntidadReferencesEntidadEGPaginaWeb)
			{
				global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.MetaforaEGPaginaEntidad newShape = new global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.MetaforaEGPaginaEntidad(this.Partition);
				return newShape;
			}
			if(element is global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.AtributoReferencesAtributoEGCampoFormulario)
			{
				global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.MetaforaEGCamposAtributos newShape = new global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.MetaforaEGCamposAtributos(this.Partition);
				return newShape;
			}
			if(element is global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.RelacionReferencesRelacionDerEntidad)
			{
				global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.MetaforaRDE newShape = new global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.MetaforaRDE(this.Partition);
				return newShape;
			}
			if(element is global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.RelacionReferencesRelacionIzqEntidad)
			{
				global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.MetaforaRIE newShape = new global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.MetaforaRIE(this.Partition);
				return newShape;
			}
			return base.CreateChildShape(element);
		}
		#endregion
		#region Decorator mapping
		/// <summary>
		/// Initialize shape decorator mappings.  This is done here rather than in individual shapes because decorator maps
		/// are defined per diagram type rather than per shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.MetaforaEntidad.DecoratorsInitialized += MetaforaEntidadDecoratorMap.OnDecoratorsInitialized;
			global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.MetaforaRelacion.DecoratorsInitialized += MetaforaRelacionDecoratorMap.OnDecoratorsInitialized;
			global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.MetaforaAtributo.DecoratorsInitialized += MetaforaAtributoDecoratorMap.OnDecoratorsInitialized;
			global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.MetaforaAtributoClave.DecoratorsInitialized += MetaforaAtributoClaveDecoratorMap.OnDecoratorsInitialized;
			global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.MetaforaRNE.DecoratorsInitialized += MetaforaRNEDecoratorMap.OnDecoratorsInitialized;
			global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.MetaforaRDE.DecoratorsInitialized += MetaforaRDEDecoratorMap.OnDecoratorsInitialized;
			global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.MetaforaRIE.DecoratorsInitialized += MetaforaRIEDecoratorMap.OnDecoratorsInitialized;
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for MetaforaEntidad.
		/// </summary>
		internal static partial class MetaforaEntidadDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for MetaforaEntidad.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.Objeto.NombreDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NombreEntidad").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for MetaforaRelacion.
		/// </summary>
		internal static partial class MetaforaRelacionDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for MetaforaRelacion.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.Objeto.NombreDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NombreRelacion").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.Relacion.cardinalidadRelacionDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CardinalidadTotal").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for MetaforaAtributo.
		/// </summary>
		internal static partial class MetaforaAtributoDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for MetaforaAtributo.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.Atributo.NombreDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NombreAtributo").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for MetaforaAtributoClave.
		/// </summary>
		internal static partial class MetaforaAtributoClaveDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for MetaforaAtributoClave.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.Atributo.NombreDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NombreClave").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for MetaforaRNE.
		/// </summary>
		internal static partial class MetaforaRNEDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for MetaforaRNE.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.RelacionReferencesRelacionNEntidad.cardilidadDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CardinalidadDec").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for MetaforaRDE.
		/// </summary>
		internal static partial class MetaforaRDEDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for MetaforaRDE.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.RelacionReferencesRelacionDerEntidad.cardinalidadDerDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CardinalidadDerDec").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for MetaforaRIE.
		/// </summary>
		internal static partial class MetaforaRIEDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for MetaforaRIE.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.RelacionReferencesRelacionIzqEntidad.cardinalidadIzqDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CardinalidadIzqDec").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		#endregion
		
		#region Connect actions
		private bool changingMouseAction;
		private global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.RelacionNEntidadConnectAction relacionNEntidadConnectAction;
		private global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.RelacionDerEntidadConnectAction relacionDerEntidadConnectAction;
		private global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.RelacionIzqEntidadConnectAction relacionIzqEntidadConnectAction;
		private global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.ConectarAtributoConnectAction conectarAtributoConnectAction;
		private global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.EntidadClaveConnectAction entidadClaveConnectAction;
		private global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.EGPaginaEntidadConnectAction eGPaginaEntidadConnectAction;
		private global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.EGCamposFormularioAtributoConnectAction eGCamposFormularioAtributoConnectAction;
		/// <summary>
		/// Virtual method to provide a filter when to select the mouse action
		/// </summary>
		/// <param name="activeView">Currently active view</param>
		/// <param name="filter">filter string used to filter the toolbox items</param>
		protected virtual bool SelectedToolboxItemSupportsFilterString(DslDiagrams::DiagramView activeView, string filter)
		{
			return activeView.SelectedToolboxItemSupportsFilterString(filter);
		}
		/// <summary>
		/// Override to provide the right mouse action when trying
		/// to create links on the diagram
		/// </summary>
		/// <param name="pointArgs"></param>
		public override void OnViewMouseEnter(DslDiagrams::DiagramPointEventArgs pointArgs)
		{
			if (pointArgs  == null) throw new global::System.ArgumentNullException("pointArgs");
		
			DslDiagrams::DiagramView activeView = this.ActiveDiagramView;
			if(activeView != null)
			{
				DslDiagrams::MouseAction action = null;
				if (SelectedToolboxItemSupportsFilterString(activeView, global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.JMGPVRCMAMBModeladoYLenguajeGraficoToolboxHelper.RelacionNEntidadFilterString))
				{
					if (this.relacionNEntidadConnectAction == null)
					{
						this.relacionNEntidadConnectAction = new global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.RelacionNEntidadConnectAction(this);
						this.relacionNEntidadConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.relacionNEntidadConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.JMGPVRCMAMBModeladoYLenguajeGraficoToolboxHelper.RelacionDerEntidadFilterString))
				{
					if (this.relacionDerEntidadConnectAction == null)
					{
						this.relacionDerEntidadConnectAction = new global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.RelacionDerEntidadConnectAction(this);
						this.relacionDerEntidadConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.relacionDerEntidadConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.JMGPVRCMAMBModeladoYLenguajeGraficoToolboxHelper.RelacionIzqEntidadFilterString))
				{
					if (this.relacionIzqEntidadConnectAction == null)
					{
						this.relacionIzqEntidadConnectAction = new global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.RelacionIzqEntidadConnectAction(this);
						this.relacionIzqEntidadConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.relacionIzqEntidadConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.JMGPVRCMAMBModeladoYLenguajeGraficoToolboxHelper.ConectarAtributoFilterString))
				{
					if (this.conectarAtributoConnectAction == null)
					{
						this.conectarAtributoConnectAction = new global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.ConectarAtributoConnectAction(this);
						this.conectarAtributoConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.conectarAtributoConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.JMGPVRCMAMBModeladoYLenguajeGraficoToolboxHelper.EntidadClaveFilterString))
				{
					if (this.entidadClaveConnectAction == null)
					{
						this.entidadClaveConnectAction = new global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.EntidadClaveConnectAction(this);
						this.entidadClaveConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.entidadClaveConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.JMGPVRCMAMBModeladoYLenguajeGraficoToolboxHelper.EGPaginaEntidadFilterString))
				{
					if (this.eGPaginaEntidadConnectAction == null)
					{
						this.eGPaginaEntidadConnectAction = new global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.EGPaginaEntidadConnectAction(this);
						this.eGPaginaEntidadConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.eGPaginaEntidadConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.JMGPVRCMAMBModeladoYLenguajeGraficoToolboxHelper.EGCamposFormularioAtributoFilterString))
				{
					if (this.eGCamposFormularioAtributoConnectAction == null)
					{
						this.eGCamposFormularioAtributoConnectAction = new global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.EGCamposFormularioAtributoConnectAction(this);
						this.eGCamposFormularioAtributoConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.eGCamposFormularioAtributoConnectAction;
				} 
				else
				{
					action = null;
				}
				
				if (pointArgs.DiagramClientView.ActiveMouseAction != action)
				{
					try
					{
						this.changingMouseAction = true;
						pointArgs.DiagramClientView.ActiveMouseAction = action;
					}
					finally
					{
						this.changingMouseAction = false;
					}
				}
			}
		}
		
		/// <summary>
		/// Snap toolbox selection back to regular pointer after using a custom connect action.
		/// </summary>
		private void OnConnectActionDeactivated(object sender, DslDiagrams::DiagramEventArgs e)
		{
			OnMouseActionDeactivated();
		}
		
		/// <summary>
		/// Overridable method to manage the mouse deactivation. The default implementation snap stoolbox selection back to regular pointer 
		/// after using a custom connect action.
		/// </summary>
		protected virtual void OnMouseActionDeactivated()
		{
			DslDiagrams::DiagramView activeView = this.ActiveDiagramView;
		
			if (activeView != null && activeView.Toolbox != null)
			{
				// If we're not changing mouse action due to changing toolbox selection change,
				// reset toolbox selection.
				if (!this.changingMouseAction)
				{
					activeView.Toolbox.SelectedToolboxItemUsed();
				}
			}
		}
		#endregion
		
		/// <summary>
		/// Dispose of connect actions.
		/// </summary>
		protected override void Dispose(bool disposing)
		{
			try
			{
				if(disposing)
				{
					if(this.relacionNEntidadConnectAction != null)
					{
						this.relacionNEntidadConnectAction.Dispose();
						this.relacionNEntidadConnectAction = null;
					}
					if(this.relacionDerEntidadConnectAction != null)
					{
						this.relacionDerEntidadConnectAction.Dispose();
						this.relacionDerEntidadConnectAction = null;
					}
					if(this.relacionIzqEntidadConnectAction != null)
					{
						this.relacionIzqEntidadConnectAction.Dispose();
						this.relacionIzqEntidadConnectAction = null;
					}
					if(this.conectarAtributoConnectAction != null)
					{
						this.conectarAtributoConnectAction.Dispose();
						this.conectarAtributoConnectAction = null;
					}
					if(this.entidadClaveConnectAction != null)
					{
						this.entidadClaveConnectAction.Dispose();
						this.entidadClaveConnectAction = null;
					}
					if(this.eGPaginaEntidadConnectAction != null)
					{
						this.eGPaginaEntidadConnectAction.Dispose();
						this.eGPaginaEntidadConnectAction = null;
					}
					if(this.eGCamposFormularioAtributoConnectAction != null)
					{
						this.eGCamposFormularioAtributoConnectAction.Dispose();
						this.eGCamposFormularioAtributoConnectAction = null;
					}
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}
		#region Constructors, domain class Id
	
		/// <summary>
		/// JMGPVRCMAMBModeladoYLenguajeGraficoDiagram domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd9194bba, 0x0d77, 0x4ed5, 0xb8, 0x24, 0xf6, 0xd0, 0x4b, 0xa5, 0x20, 0xb7);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public JMGPVRCMAMBModeladoYLenguajeGraficoDiagram(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public JMGPVRCMAMBModeladoYLenguajeGraficoDiagram(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico
{
	
		/// <summary>
		/// Double derived implementation for the rule that initiates view fixup when an element that has an associated shape is added to the model.
		/// This now enables the DSL author to everride the SkipFixUp() method 
		/// </summary>
		internal partial class FixUpDiagramBase : DslModeling::AddRule
		{
			protected virtual bool SkipFixup(DslModeling::ModelElement childElement)
			{
				return childElement.IsDeleted;
			}
		}
	
		/// <summary>
		/// Rule that initiates view fixup when an element that has an associated shape is added to the model. 
		/// </summary>
		[DslModeling::RuleOn(typeof(global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.Entidad), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.Relacion), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.AtributoSimple), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.AtributoCP), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.EGPortalWeb), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.EGPaginaWeb), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.EGCampoFormulario), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.RelacionReferencesRelacionNEntidad), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.ObjetoReferencesObjetoAtributoSimple), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.EntidadReferencesEntidadCP), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.EntidadReferencesEntidadEGPaginaWeb), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.AtributoReferencesAtributoEGCampoFormulario), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.RelacionReferencesRelacionDerEntidad), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.RelacionReferencesRelacionIzqEntidad), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		internal sealed partial class FixUpDiagram : FixUpDiagramBase
		{
			[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
			public override void ElementAdded(DslModeling::ElementAddedEventArgs e)
			{
				if(e == null) throw new global::System.ArgumentNullException("e");
			
				DslModeling::ModelElement childElement = e.ModelElement;
				if (this.SkipFixup(childElement))
					return;
				DslModeling::ModelElement parentElement;
				if(childElement is DslModeling::ElementLink)
				{
					parentElement = GetParentForRelationship((DslModeling::ElementLink)childElement);
				} else
				if(childElement is global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.Entidad)
				{
					parentElement = GetParentForEntidad((global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.Entidad)childElement);
				} else
				if(childElement is global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.Relacion)
				{
					parentElement = GetParentForRelacion((global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.Relacion)childElement);
				} else
				if(childElement is global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.AtributoSimple)
				{
					parentElement = GetParentForAtributoSimple((global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.AtributoSimple)childElement);
				} else
				if(childElement is global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.AtributoCP)
				{
					parentElement = GetParentForAtributoCP((global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.AtributoCP)childElement);
				} else
				if(childElement is global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.EGPortalWeb)
				{
					parentElement = GetParentForEGPortalWeb((global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.EGPortalWeb)childElement);
				} else
				if(childElement is global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.EGPaginaWeb)
				{
					parentElement = GetParentForEGPaginaWeb((global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.EGPaginaWeb)childElement);
				} else
				if(childElement is global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.EGCampoFormulario)
				{
					parentElement = GetParentForEGCampoFormulario((global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.EGCampoFormulario)childElement);
				} else
				{
					parentElement = null;
				}
				
				if(parentElement != null)
				{
					DslDiagrams::Diagram.FixUpDiagram(parentElement, childElement);
				}
			}
			public static global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.ModeloDERAWebBD GetParentForEntidad( global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.Entidad root )
			{
				// Segments 0 and 1
				global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.ModeloDERAWebBD result = root.EntidadModelo;
				if ( result == null ) return null;
				return result;
			}
			public static global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.ModeloDERAWebBD GetParentForRelacion( global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.Relacion root )
			{
				// Segments 0 and 1
				global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.ModeloDERAWebBD result = root.RelacionModelo;
				if ( result == null ) return null;
				return result;
			}
			public static global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.ModeloDERAWebBD GetParentForAtributoSimple( global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.AtributoSimple root )
			{
				// Segments 0 and 1
				global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.ModeloDERAWebBD result = root.AtributoSimpleModelo;
				if ( result == null ) return null;
				return result;
			}
			public static global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.ModeloDERAWebBD GetParentForAtributoCP( global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.AtributoCP root )
			{
				// Segments 0 and 1
				global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.ModeloDERAWebBD result = root.AtributoCPModelo;
				if ( result == null ) return null;
				return result;
			}
			public static global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.ModeloDERAWebBD GetParentForEGPortalWeb( global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.EGPortalWeb root )
			{
				// Segments 0 and 1
				global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.ModeloDERAWebBD result = root.EGModelo;
				if ( result == null ) return null;
				return result;
			}
			public static global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.ModeloDERAWebBD GetParentForEGPaginaWeb( global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.EGPaginaWeb root )
			{
				// Segments 0 and 1
				global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.ModeloDERAWebBD result = root.EGPaginaWebModelo;
				if ( result == null ) return null;
				return result;
			}
			public static global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.ModeloDERAWebBD GetParentForEGCampoFormulario( global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.EGCampoFormulario root )
			{
				// Segments 0 and 1
				global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.ModeloDERAWebBD result = root.ModeloDERAWebBD;
				if ( result == null ) return null;
				return result;
			}
			private static DslModeling::ModelElement GetParentForRelationship(DslModeling::ElementLink elementLink)
			{
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslModeling::ModelElement> linkedElements = elementLink.LinkedElements;
	
				if (linkedElements.Count == 2)
				{
					DslDiagrams::ShapeElement sourceShape = linkedElements[0] as DslDiagrams::ShapeElement;
					DslDiagrams::ShapeElement targetShape = linkedElements[1] as DslDiagrams::ShapeElement;
	
					if(sourceShape == null)
					{
						DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[0]);
						foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
						{
							DslDiagrams::ShapeElement shape = presentationElement as DslDiagrams::ShapeElement;
							if (shape != null)
							{
								sourceShape = shape;
								break;
							}
						}
					}
					
					if(targetShape == null)
					{
						DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[1]);
						foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
						{
							DslDiagrams::ShapeElement shape = presentationElement as DslDiagrams::ShapeElement;
							if (shape != null)
							{
								targetShape = shape;
								break;
							}
						}
					}
					
					if(sourceShape == null || targetShape == null)
					{
						global::System.Diagnostics.Debug.Fail("Unable to find source and/or target shape for view fixup.");
						return null;
					}
	
					DslDiagrams::ShapeElement sourceParent = sourceShape.ParentShape;
					DslDiagrams::ShapeElement targetParent = targetShape.ParentShape;
	
					while (sourceParent != targetParent && sourceParent != null)
					{
						DslDiagrams::ShapeElement curParent = targetParent;
						while (sourceParent != curParent && curParent != null)
						{
							curParent = curParent.ParentShape;
						}
	
						if(sourceParent == curParent)
						{
							break;
						}
						else
						{
							sourceParent = sourceParent.ParentShape;
						}
					}
	
					while (sourceParent != null)
					{
						// ensure that the parent can parent connectors (i.e., a diagram or a swimlane).
						if(sourceParent is DslDiagrams::Diagram || sourceParent is DslDiagrams::SwimlaneShape)
						{
							break;
						}
						else
						{
							sourceParent = sourceParent.ParentShape;
						}
					}
	
					global::System.Diagnostics.Debug.Assert(sourceParent != null && sourceParent.ModelElement != null, "Unable to find common parent for view fixup.");
					return sourceParent.ModelElement;
				}
	
				return null;
			}
		}
		
	
		/// <summary>
		/// A rule which fires when data mapped to outer text decorators has changed,
		/// so we can update the decorator host's bounds.
		/// </summary>
		[DslModeling::RuleOn(typeof(global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.Relacion), InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.RelacionReferencesRelacionNEntidad), InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.RelacionReferencesRelacionDerEntidad), InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.RelacionReferencesRelacionIzqEntidad), InitiallyDisabled=true)]
		internal sealed class DecoratorPropertyChanged : DslModeling::ChangeRule
		{
			[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = "Generated code.")]
			public override void ElementPropertyChanged(DslModeling::ElementPropertyChangedEventArgs e)
			{
				if(e == null) throw new global::System.ArgumentNullException("e");
				
				if (e.DomainProperty.Id == global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.Relacion.cardinalidadRelacionDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.MetaforaRelacion.FindMetaforaRelacionDecorator("CardinalidadTotal");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.Relacion.DomainClassId);
					}
				}
				else if (e.DomainProperty.Id == global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.RelacionReferencesRelacionNEntidad.cardilidadDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.MetaforaRNE.FindMetaforaRNEDecorator("CardinalidadDec");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.RelacionReferencesRelacionNEntidad.DomainClassId);
					}
				}
				else if (e.DomainProperty.Id == global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.RelacionReferencesRelacionDerEntidad.cardinalidadDerDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.MetaforaRDE.FindMetaforaRDEDecorator("CardinalidadDerDec");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.RelacionReferencesRelacionDerEntidad.DomainClassId);
					}
				}
				else if (e.DomainProperty.Id == global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.RelacionReferencesRelacionIzqEntidad.cardinalidadIzqDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.MetaforaRIE.FindMetaforaRIEDecorator("CardinalidadIzqDec");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.RelacionReferencesRelacionIzqEntidad.DomainClassId);
					}
				}
			}
		}
	
		/// <summary>
		/// Reroute a connector when the role players of its underlying relationship change
		/// </summary>
		[DslModeling::RuleOn(typeof(global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.RelacionReferencesRelacionNEntidad), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.ObjetoReferencesObjetoAtributoSimple), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.EntidadReferencesEntidadCP), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.EntidadReferencesEntidadEGPaginaWeb), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.AtributoReferencesAtributoEGCampoFormulario), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.RelacionReferencesRelacionDerEntidad), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.RelacionReferencesRelacionIzqEntidad), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		internal sealed class ConnectorRolePlayerChanged : DslModeling::RolePlayerChangeRule
		{
			/// <summary>
			/// Reroute a connector when the role players of its underlying relationship change
			/// </summary>
			public override void RolePlayerChanged(DslModeling::RolePlayerChangedEventArgs e)
			{
				if (e == null) throw new global::System.ArgumentNullException("e");
	
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslDiagrams::PresentationViewsSubject> connectorLinks = DslDiagrams::PresentationViewsSubject.GetLinksToPresentation(e.ElementLink);
				foreach (DslDiagrams::PresentationViewsSubject connectorLink in connectorLinks)
				{
					// Fix up any binary link shapes attached to the element link.
					DslDiagrams::BinaryLinkShape linkShape = connectorLink.Presentation as DslDiagrams::BinaryLinkShape;
					if (linkShape != null)
					{
						global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.JMGPVRCMAMBModeladoYLenguajeGraficoDiagram diagram = linkShape.Diagram as global::UPM_IPS.JMGPVRCMAMBModeladoYLenguajeGrafico.JMGPVRCMAMBModeladoYLenguajeGraficoDiagram;
						if (diagram != null)
						{
							if (e.NewRolePlayer != null)
							{
								DslDiagrams::NodeShape fromShape;
								DslDiagrams::NodeShape toShape;
								diagram.GetSourceAndTargetForConnector(linkShape, out fromShape, out toShape);
								if (fromShape != null && toShape != null)
								{
									if (!object.Equals(fromShape, linkShape.FromShape))
									{
										linkShape.FromShape = fromShape;
									}
									if (!object.Equals(linkShape.ToShape, toShape))
									{
										linkShape.ToShape = toShape;
									}
								}
								else
								{
									// delete the connector if we cannot find an appropriate target shape.
									linkShape.Delete();
								}
							}
							else
							{
								// delete the connector if the new role player is null.
								linkShape.Delete();
							}
						}
					}
				}
			}
		}
	}
